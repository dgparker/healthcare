# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
r"""A script to deploy monitored projects.

Create a project config YAML file (see README.md for details) then run the
script with:
  bazel run :create_project -- \
    --project_yaml=my_project_config.yaml \
    --generated_fields_path=my_generated_fields.yaml \
    --projects='*' \
    --nodry_run \
    --alsologtostderr

To preview the commands that will run, use `--dry_run`.
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import subprocess

from absl import app
from absl import flags

FLAGS = flags.FLAGS

flags.DEFINE_string('project_yaml', None,
                    'Location of the project config YAML.')
flags.DEFINE_list('projects', ['*'],
                  ('Project IDs within --project_yaml to deploy, '
                   'or "*" to deploy all projects.'))
flags.DEFINE_string('generated_fields_path', None,
                    ('Path to save the YAML file containing post deployment '
                     'runtime fields. This file will be autogenerated.'))
flags.DEFINE_string('output_rules_path', None,
                    ('Path to local directory or GCS bucket to output rules '
                     'files. If unset, directly writes to the Forseti server '
                     'bucket.'))
flags.DEFINE_bool('enable_terraform', False, 'DEV ONLY. Enable terraform.')
flags.DEFINE_bool('dry_run', True,
                  ('By default, no gcloud commands will be executed. '
                   'Use --nodry_run to execute commands.'))
flags.DEFINE_string(
    'apply_binary', None, 'Path to apply binary. '
    'Set automatically by the Bazel rule.')


# TODO: remove this script entirely after we update the docs.
def main(argv):
  del argv  # Unused.

  args = [
      FLAGS.apply_binary,
      '--config_path=%s' % FLAGS.project_yaml,
      '--output_path=%s' % FLAGS.generated_fields_path,
      '--enable_terraform=%s' % FLAGS.enable_terraform,
      '--dry_run=%s' % FLAGS.dry_run,
  ]

  if FLAGS.output_rules_path:
    args.append('--rules_path=%s' % FLAGS.output_rules_path)

  if FLAGS.projects and FLAGS.projects != ['*']:
    args.append(projects='--projects=%s' % ','.join(FLAGS.projects))

  subprocess.check_call(args)


if __name__ == '__main__':
  flags.mark_flag_as_required('project_yaml')
  flags.mark_flag_as_required('generated_fields_path')
  flags.mark_flag_as_required('apply_binary')
  app.run(main)
